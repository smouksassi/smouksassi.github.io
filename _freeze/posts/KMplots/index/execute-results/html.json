{
  "hash": "a6fc02d6714c821b8f0921c0ab6bf72b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualizing Time to Event Response\"\nauthor: \"Samer Mouksassi\"\ndate: \"2025-08-25\"\ncategories: [news, visualization]\nimage: \"kmplot.png\"\nformat:\n html:\n  code-fold: true\n---\n\nIn this post, I will continue with the exposure response theme. The previous [blog post](https://smouksassi.github.io/posts/erplots/ \"Visualizing Dose Exposure Response\") focused on Binary response outcomes. In today's post I will illustrate how to explore and communicate time to event outcomes. First we start using a specialized geom from my ggquickeda package: [geom_km()](https://smouksassi.github.io/ggquickeda/reference/geom_km.html \"native Kaplan-Meier survival curve\"). Since this is a native ggplot2 geom it supports, aesthetics, faceting and margins, themings and anything else you expect from a ggplot2 object. Later on I cover the usage of the specialized `ggkmrisktable` function that support adding number at risk tables and more.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(ggquickeda)\nlibrary(scales)\n\n options(ggplot2.discrete.colour =\n           list(c( \"#4682AC\",\"#FDBB2F\",\"#EE3124\" ,\"#336343\",\"#7059a6\", \"#803333\")))\n  options(ggplot2.discrete.fill =\n           list(c( \"#4682AC\",\"#FDBB2F\",\"#EE3124\" ,\"#336343\",\"#7059a6\", \"#803333\"))) \n  \nlung_long <-  survival::lung |>\n mutate(status = ifelse(status==1,0,1)) |>\n gather(Endpoint,DV,status) |>\n filter(!is.na(ph.karno),!is.na(pat.karno),!is.na(ph.ecog))|>\n mutate(ph.ecog = ifelse(ph.ecog>1,\">1\",\"1\"))\n\nggplot(lung_long, aes(\n                 time = time,\n               status = DV,\n               color  = ph.ecog,\n               linetype = ph.ecog,\n               fill = ph.ecog)) + \n  geom_kmband()+\n  geom_km() +\n  facet_grid(~ph.ecog,margin=\"ph.ecog\",\n             labeller = label_both)+\n  theme_bw(base_size = 16) +\n  labs(x=\"time of follow up\",y=\"Survival\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nThis is a nice **Kaplan-Meir** plot that shows the K-M estimate by ecog status and both overlaid in the facet margin (all) panel. To include the effects of continuous variables, we will need to \"bin\" it. I will use age as a example predictor binning it by **tertiles**. Some nice features are outlined below:\n\n-   This is a ggplot object and we can **facet** by any variable available in the dataset. Furthermore, I will illustrate the usage of the nice `facet_nested` from the `ggh4x` package to group facet strips that belong to the same level.\n\n-   The plot is done in two ways using exptile as color and faceting variable which result in a facet margin **(all)** having the **pooled** estimate (all tertiles combined). Then, using exptile as color and faceting by an exact copy of it that we call exptile2. This tricks ggplot2 margins to **overlay** the three tertiles curves in the **(all)** panels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexposure_metric_plac_value <- 0\n\nlung_long_metrics <- lung_long %>% \n  gather(expname,expvalue,age) |>\n  group_by(Endpoint,expname) |>\n  mutate( Q33 = quantile(expvalue[!expvalue %in% c(exposure_metric_plac_value)], 1/3, na.rm = TRUE), \n          Q66 = quantile(expvalue[!expvalue %in% c(exposure_metric_plac_value)], 2/3, na.rm = TRUE),\n          exptile = case_when(\n            expvalue == exposure_metric_plac_value ~ \"zero\", \n            expvalue > exposure_metric_plac_value & expvalue <= Q33 ~ \"T1\",\n            expvalue > Q33 & expvalue <= Q66 ~  \"T2\",\n            expvalue > Q66 ~ \"T3\")\n  )\nlibrary(ggh4x)\nggplot(lung_long_metrics, aes(\n                 time = time,\n               status = DV,\n               color  = exptile,\n               linetype = ph.ecog,\n               fill = exptile)) + \n  geom_km() +\n  facet_nested( ph.ecog~ expname+ exptile,\n               labeller = label_both,margin = \"exptile\")+\n  theme_bw(base_size = 12) +\n  labs(x=\"time of follow up\",y=\"Survival\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\nlung_long_metrics$exptile2 <- lung_long_metrics$exptile\n\nggplot(lung_long_metrics, aes(\n               time = time,\n               status = DV,\n               color  = exptile,\n               linetype = ph.ecog,\n               fill = exptile)) + \n  geom_km() +\n  facet_nested( ph.ecog ~ expname + exptile2,\n               labeller = label_both, margins = \"exptile2\")+\n  theme_bw(base_size = 12) +\n  labs(x=\"time of follow up\",y=\"Survival\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n:::\n\n\nIt is common for these type of plots to present a transformation of the default which is the **probability of not having the event** . For example, changing it to **cumulative hazard**, or to **event probability**. It is also desirable to have a **number at risk table** underneath the plot. `ggkmrisktable` was written to facilitate and automate these tasks with several flexible options. First, we try to reproduce the last two plot. Notice how exptile2 is available automatically to enable different margins.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggkmrisktable(\n  data = lung_long,\n  time = \"time\",\n  status = \"DV\",\n  endpoint = \"Endpoint\",\n  linetype = \"ph.ecog\",\n  exposure_metrics = c(\"age\"),\n  exposure_metric_split = c(\"tertile\"),\n  nrisk_table_plot = TRUE, km_band = FALSE,\n  nrisk_table_variables = c(\"n.risk\")\n)+\n  facet_grid(ph.ecog~exptile,margin = \"exptile\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggkmrisktable(\n  data = lung_long,\n  time = \"time\",\n  status = \"DV\",\n  endpoint = \"Endpoint\",\n  linetype = \"ph.ecog\",\n  exposure_metrics = c(\"age\"),\n  exposure_metric_split = c(\"tertile\"),\n  nrisk_table_plot = TRUE, km_band = FALSE,\n  nrisk_table_variables = c(\"n.risk\")\n)+\n  facet_grid(ph.ecog~exptile2,margin = \"exptile2\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n:::\n\n\nThe plot above is busy and need to be simplified. Next, I show how to transform the event and I facet by ecog status.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggkmrisktable(\n  data = lung_long,\n  time = \"time\",\n  status = \"DV\",\n  endpoint = \"Endpoint\",\n  linetype = \"ph.ecog\",\n  exposure_metrics = c(\"age\"),\n  exposure_metric_split = c(\"tertile\"),\n  show_exptile_values = FALSE,\n  color_fill = \"exptile\",\n  xlab = \"time of follow up\",\n  ylab = \"Survival\",\n  nrisk_table_plot = TRUE,\n  nrisk_table_variables = c(\"n.risk\",\"n.censor\"),\n  nrisk_position_scaler = 0.2,\n  nrisk_position_dodge = 0.2,\n  nrisk_offset = 0,\n  km_trans = c(\"event\"),\n  km_ticks = FALSE, km_band = FALSE,\n  km_median_table_order = c(\"default\"),\n  facet_formula = ~ph.ecog)+\n  facet_nested( expname~ph.ecog,labeller = label_both)+\n  labs(x=\"time of follow up\",y=\"Survival\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nThe use of **additional options** like showing the tertiles cutoffs, the median survival, controlling the order and the interval at which numbers at risk appear is shown next.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggkmrisktable(\n  data = lung_long,\n  time = \"time\",\n  status = \"DV\",\n  endpoint = \"Endpoint\",\n  exposure_metrics = c(\"age\"),\n  exposure_metric_split = c(\"tertile\"),\n  show_exptile_values = TRUE,\n  show_exptile_values_order = \"default\",\n  km_median =\"table\",\n  km_median_table_pos =\"right\",\n  km_median_table_order = \"default\",\n  color_fill = \"exptile\",\n  xlab = \"time of follow up\",\n  ylab = \"Survival\",\n  nrisk_table_plot = TRUE,\n  nrisk_table_variables = c(\"n.risk\",\"n.censor\"),\n  nrisk_position_scaler = 0.2,\n  nrisk_position_dodge = - 0.2,\n  nrisk_filterout0 = TRUE,\n  nrisk_table_breaktimeby = 50,\n  nrisk_offset = 0,\n  km_ticks = FALSE, km_band = TRUE,\n  km_trans = \"event\",\n  facet_formula = ~expname)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nWhile the function supports computing and printing **p-values**, I strongly, recommend that one run the **statistical tests** outside of the function. Make sure to document what test was done, on which data. Then we included the appropriate information using regular text/lable ggplot2 layer. An example, showing how to do an **LRT** on a **cox fit** is included.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggkmrisktable(\n  data = lung_long,\n  time = \"time\",\n  status = \"DV\",\n  endpoint = \"Endpoint\",\n  color_fill = \"exptile\",\n  linetype = \"exptile\", groupvar1 = \"none\",\n  groupvar2 = \"none\",groupvar3 = \"none\",\n  exposure_metrics = c(\"age\"),\n  exposure_metric_split = c(\"tertile\"),\n  nrisk_table_plot = FALSE,\n  km_ticks = FALSE, km_band = FALSE,\n  km_trans = \"event\",\n  km_logrank_pvalue = TRUE,\n  facet_formula = expname ~ Endpoint )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggkmrisktable(\n  data = lung_long,\n  time = \"time\",\n  status = \"DV\",\n  endpoint = \"Endpoint\",\n  color_fill = \"ph.ecog\",\n  linetype = \"none\", groupvar1 = \"none\",\n  groupvar2 = \"none\",groupvar3 = \"none\",\n  exposure_metrics = c(\"age\"),\n  exposure_metric_split = c(\"tertile\"),\n  nrisk_table_plot = FALSE,\n  km_ticks = FALSE, km_band = FALSE,\n  km_trans = \"event\",\n  km_logrank_pvalue = TRUE,\n  km_logrank_pvalue_cutoff = 0.001,\n  facet_formula = ~Endpoint)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggkmrisktable(\n  data = lung_long,\n  time = \"time\",\n  status = \"DV\",\n  endpoint = \"Endpoint\",\n  color_fill = \"exptile\",\n  linetype = \"exptile\", groupvar1 = \"ph.ecog\",\n  groupvar2 = \"none\",groupvar3 = \"none\",\n  exposure_metrics = c(\"age\"),\n  exposure_metric_split = c(\"tertile\"),\n  nrisk_table_plot = FALSE,\n  km_ticks = FALSE, km_band = FALSE,\n  km_trans = \"event\",\n  km_logrank_pvalue = TRUE,\n  facet_formula = ~ph.ecog)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-3.png){width=672}\n:::\n:::\n\n\nOne would expect that the p-values shown in each panel are **specific** for the **subset of panel data** comparing the curves. While the case of single split, are clear, things get out of control fast when we have multiple splits/predictors and then deciding on what particular test we really want. Is it **overall** on all data ar within a **specific strata**/subset?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(survival)\n#| message: false\n#| warning: false\n#| paged-print: true\n\n# overall \nsurvdiffexptile <- survdiff(Surv(time, DV) ~ exptile,\n         data=lung_long_metrics)\npvalueexptile <- pchisq(survdiffexptile$chisq, length(survdiffexptile$n)-1, lower.tail = FALSE)\npvalueexptile\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.2132509\n```\n\n\n:::\n\n```{.r .cell-code}\nsurvdiffph.ecog <- survdiff(Surv(time, DV) ~ ph.ecog,\n         data=lung_long_metrics)\npvalueph.ecog <- pchisq(survdiffph.ecog$chisq, length(survdiffph.ecog$n)-1, lower.tail = FALSE)\n\n\nsurvdiffexptileecoggt1 <- survdiff(Surv(time, DV) ~ exptile,\n         data=lung_long_metrics %>% \n           filter(ph.ecog!=\"1\"))\npvalueexptileecoggt1 <- pchisq(survdiffexptileecoggt1$chisq, length(survdiffexptileecoggt1$n)-1, lower.tail = FALSE)\npvalueexptileecoggt1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5051531\n```\n\n\n:::\n\n```{.r .cell-code}\nsurvdiffexptileecogeq1 <- survdiff(Surv(time, DV) ~ exptile,\n         data=lung_long_metrics %>% \n           filter(ph.ecog==\"1\"))\npvalueexptileecogeq1 <- pchisq(survdiffexptileecogeq1$chisq, length(survdiffexptileecogeq1$n)-1, lower.tail = FALSE)\npvalueexptileecogeq1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5783551\n```\n\n\n:::\n:::\n\n\nA **global test** across multiple variables that enter the survival equation, with or without interaction can be needed. For these, Idefinitely recommend to avoid using the automatic **built-in** **p-values**. The `ggkmrisktable` has groupvar1, groupvar2, and groupvar3 variables to give the user more control on how to \"group\" to test p-values but possibilities remain limited as compared to controlling the test with user-written code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggkmrisktable(\n  data = lung_long,\n  time = \"time\",\n  status = \"DV\",\n  endpoint = \"Endpoint\",\n  color_fill = \"exptile\",\n  linetype = \"ph.ecog\", groupvar1 = \"none\",\n  groupvar2 = \"none\",groupvar3 = \"none\",\n  exposure_metrics = c(\"age\"),\n  exposure_metric_split = c(\"tertile\"),\n  nrisk_table_plot = FALSE,\n  km_ticks = FALSE, km_band = FALSE,\n  km_trans = \"event\",\n  km_logrank_pvalue = TRUE,\n  facet_formula = ~Endpoint)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\nsurvdiffph.ecogexptile <- survdiff(Surv(time, DV) ~ ph.ecog+exptile, data=lung_long_metrics)\npvalueph.ecogexptile <- pchisq(survdiffph.ecogexptile$chisq, length(survdiffph.ecogexptile$n)-1, lower.tail = FALSE)\npvalueph.ecogexptile\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.002126178\n```\n\n\n:::\n\n```{.r .cell-code}\nrmsmodel1 <- coxph(Surv(time, DV) ~ 1, data       = lung_long_metrics)\nrmsmodel2 <- coxph(Surv(time, DV) ~ ph.ecog*exptile, data = lung_long_metrics)\n#anova(rmsmodel1,rmsmodel2)\n\nandata <- anova(rmsmodel1,rmsmodel2)\n\n\npvalueinformation = data.frame(p=andata[2,4],\n                               Endpoint=\"status\",\n                               Model=\"Surv(time, DV) ~ ph.ecog*age(tertiles)\",\n                               test=\"LRT\")\n\n\nggkmrisktable(\n  data = lung_long,\n  time = \"time\",\n  status = \"DV\",\n  endpoint = \"Endpoint\",\n  color_fill = \"exptile\",\n  linetype = \"ph.ecog\", groupvar1 = \"none\",\n  groupvar2 = \"none\",groupvar3 = \"none\",\n  exposure_metrics = c(\"age\"),\n  exposure_metric_split = c(\"tertile\"),\n  nrisk_table_plot = FALSE,\n  km_ticks = FALSE, km_band = FALSE,\n  km_trans = \"event\",\n  km_logrank_pvalue = FALSE,\n  facet_formula = ~Endpoint)+\n  geom_text(data=pvalueinformation,\n            aes(x=1000,y=0.2,label=paste0(\"Model: \",Model,\"\\n\",\n                                         test,\" test vs null model: \", scales::pvalue( p,add_p = TRUE,accuracy = 0.0001))),inherit.aes = FALSE,\n            hjust=1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggkmrisktable(\n  data = lung_long,\n  time = \"time\",\n  status = \"DV\",\n  endpoint = \"Endpoint\",\n  color_fill = \"exptile\",\n  linetype = \"ph.ecog\", groupvar1 = \"none\",\n  groupvar2 = \"none\",groupvar3 = \"none\",\n  exposure_metrics = c(\"age\"),\n  exposure_metric_split = c(\"tertile\"),\n  nrisk_table_plot = TRUE,nrisk_table_variables = c(\"n.risk\"),\n  km_ticks = FALSE, km_band = FALSE,\n  km_trans = \"event\",\n  km_logrank_pvalue = FALSE,\n  facet_formula = ~Endpoint)+\n  facet_grid(expname~ph.ecog)+\n  geom_text(data=pvalueinformation,\n            aes(x=1000,y=0.2,label=paste0(\"Model: \",Model,\"\\n\",\n                                         test,\" test vs null model: \", scales::pvalue( p,add_p = TRUE,accuracy = 0.0001))),inherit.aes = FALSE,\n            hjust=1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-3.png){width=672}\n:::\n:::\n\n\nIn this post, I introduced some of the features available in [ggkmrisktable](https://smouksassi.github.io/ggquickeda/reference/ggkmrisktable.html \"Create a Kaplan-Meier plot with risk table\"). Since this is a regular ggplot2 plot the possibilities are limitless.\n\nIf you have any questions feel free to contact me on [github](https://github.com/smouksassi/ggquickeda/issues \"submit issues\").\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}